{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dataflow_sourcenew",
						"type": "DatasetReference"
					},
					"name": "dataflowcsv"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select"
				},
				{
					"name": "filter"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate"
				},
				{
					"name": "alterRow"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as short,",
				"          transactional_date as timestamp,",
				"          product_id as string,",
				"          customer_id as short,",
				"          payment as string,",
				"          credit_card as long,",
				"          loyalty_card as boolean,",
				"          cost as double,",
				"          quantity as short,",
				"          price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> dataflowcsv",
				"dataflowcsv select(mapColumn(",
				"          transaction_id,",
				"          transactional_date,",
				"          product_id,",
				"          customer_id,",
				"          payment,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"select filter(customer_id!=12) ~> filter",
				"filter split(payment== 'visa',",
				"     payment== 'mastercard',",
				"     disjoint: false) ~> split1@(visa, Mastercard, Amex)",
				"split1@Amex derive(payment = coalesce(payment, 'N/A')) ~> derivedColumn1",
				"split1@visa aggregate(groupBy(customer_id),",
				"     product_id = max(product_id)) ~> aggregate",
				"aggregate alterRow(insertIf(1==1)) ~> alterRow",
				"alterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}